org: dakshesh
app: zoomin
service: zoomin
frameworkVersion: '3'

provider:
  name: aws
  deploymentMethod: direct
  timeout: 20
  tracing:
    lambda: true
  environment:
    AWS_BUCKET_NAME: zoomin-dev-images
    ACCESS_KEY_ID: AKIAYEUNNGGXZZWD3RES
    SECRET_ACCESS_KEY: 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
    EMAIL_SOURCE_ACCOUNT: 'support@zoominlive.com'
    RDS_HOST: zoomin-1.crzgnnp8iqzv.us-west-2.rds.amazonaws.com
    # RDS_HOST: 127.0.0.1
    RDS_PORT: 3306
    RDS_USER: zoomin_dbuser
    # RDS_USER: root
    RDS_PASSWORD: Wk8$b6!xR
    RDS_DB_NAME: zoomin
    JWT_SECRET_KEY: zoominlivesecretkey
    JWT_REFRESH_SECRET_KEY: 2d
    ACCESS_TOKEN_EXPIRY: 1d
    REFRESH_TOKEN_EXPIRY: 1d
    NODE_ENV: production
    RTSP_STREAM_BASE_URL: http://35.91.216.67

  runtime: nodejs14.x
  stage: dev
  region: us-west-2
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action: 's3:ListBucket'
          Resource:
            - '*'
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource:
            - 'arn:aws:cloudformation:us-west-2:559716053423:stack/zoomin-dev/51663190-43ef-11ed-b517-0625b6019865'
        - Effect: 'Allow'
          Action:
            - 'ses:SendEmail'
            - 'ses:SendRawEmail'
          Resource:
            - 'arn:aws:ses:*'

functions:
  api:
    handler: handler.handler
    events:
      - httpApi: '*'
  getUserDetails:
    handler: handler.handler
    events:
      - httpApi: 'GET /api/users'
  createUser:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/users/createUser'
  login:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/users/login'
  changePassword:
    handler: handler.handler
    events:
      - httpApi: 'PUT /api/users/changePassword'
  setPassword:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/users/setPassword'
  forgetPassword:
    handler: handler.handler
    events:
      - httpApi: 'PUT /api/users/forgetPassword'
  updateUserProfile:
    handler: handler.handler
    events:
      - httpApi: 'PUT /api/users'
  deleteUserProfile:
    handler: handler.handler
    events:
      - httpApi: 'DELETE /api/users'
  uploadImageToS3:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/users/uploadImage'
  deleteImageFromS3:
    handler: handler.handler
    events:
      - httpApi: 'DELETE /api/users/deleteImage'
  getAllUserDetails:
    handler: handler.handler
    events:
      - httpApi: 'GET /api/users/all'
  deleteUser:
    handler: handler.handler
    events:
      - httpApi: 'DELETE /api/users/delete'
  editUser:
    handler: handler.handler
    events:
      - httpApi: 'PUT /api/users/edit'
  changeRegisteredEmail:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/users/emailChange'
  isEmailExist:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/users/emailValidation'

  getAllCameras:
    handler: handler.handler
    events:
      - httpApi: 'GET /api/cams'
  createCamera:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/cams/add'
  deleteCamera:
    handler: handler.handler
    events:
      - httpApi: 'DELETE /api/cams/delete'

  createChild:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/family/child/add'
  editChild:
    handler: handler.handler
    events:
      - httpApi: 'PUT /api/family/child/edit'
  disableChild:
    handler: handler.handler
    events:
      - httpApi: 'PUT /api/family/child/disable'
  enableChild:
    handler: handler.handler
    events:
      - httpApi: 'PUT /api/family/child/enable'
  deleteChild:
    handler: handler.handler
    events:
      - httpApi: 'DELETE /api/family/child/delete'

  getStreamStatistics:
    handler: handler.handler
    events:
      - httpApi: 'GET /api/dashboard'

  getAllFamilyDetails:
    handler: handler.handler
    events:
      - httpApi: 'GET /api/family'
  createFamily:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/family/add'
  editFamily:
    handler: handler.handler
    events:
      - httpApi: 'PUT /api/family/edit'
  addParent:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/family/addParent'
  disableFamily:
    handler: handler.handler
    events:
      - httpApi: 'PUT /api/family/disable'
  enableFamily:
    handler: handler.handler
    events:
      - httpApi: 'PUT /api/family/enable'
  deleteFamily:
    handler: handler.handler
    events:
      - httpApi: 'DELETE /api/family/delete'
  validateFamilyMember:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/family/setPassword'
  changeRegisteredEmailforFamilyMember:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/family/emailChange'

  getAllRoomsDetails:
    handler: handler.handler
    events:
      - httpApi: 'GET /api/rooms'
  createRoom:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/rooms/add'
  editRoom:
    handler: handler.handler
    events:
      - httpApi: 'PUT /api/rooms/edit'
  deleteRoom:
    handler: handler.handler
    events:
      - httpApi: 'DELETE /api/rooms/delete'
  getAllRoomsList:
    handler: handler.handler
    events:
      - httpApi: 'GET /api/rooms/list'

  getAllCamForLocation:
    handler: handler.handler
    events:
      - httpApi: 'GET /api/watchstream'
  addRecentViewers:
    handler: handler.handler
    events:
      - httpApi: 'POST /api/watchstream/addviewer'

  disableScheduledMembers:
    handler: cron.disableScheduledFamilyAndChild
    events:
      - schedule: rate(1 day)

plugins:
  - serverless-offline
